SQL

-- Question 1: Achieving 1NF

-- Create a temporary table with the original data (for demonstration)
CREATE TEMPORARY TABLE ProductDetail (
    OrderID INT,
    CustomerName VARCHAR(255),
    Products VARCHAR(255)
);

-- Insert the given data into the temporary table
INSERT INTO ProductDetail (OrderID, CustomerName, Products) VALUES
(101, 'John Doe', 'Laptop, Mouse'),
(102, 'Jane Smith', 'Tablet, Keyboard, Mouse'),
(103, 'Emily Clark', 'Phone');

-- Transform the table into 1NF using a common table expression (CTE) and string splitting
WITH RECURSIVE SplitProducts AS (
    SELECT
        OrderID,
        CustomerName,
        SUBSTRING_INDEX(Products, ',', 1) AS Product,
        SUBSTRING(Products, LENGTH(SUBSTRING_INDEX(Products, ',', 1)) + 2) AS RemainingProducts
    FROM ProductDetail
    UNION ALL
    SELECT
        OrderID,
        CustomerName,
        SUBSTRING_INDEX(RemainingProducts, ',', 1),
        SUBSTRING(RemainingProducts, LENGTH(SUBSTRING_INDEX(RemainingProducts, ',', 1)) + 2)
    FROM SplitProducts
    WHERE RemainingProducts != ''
)
SELECT OrderID, CustomerName, Product
FROM SplitProducts;

-- Question 2: Achieving 2NF

-- Create a temporary table with the original data (for demonstration)
CREATE TEMPORARY TABLE OrderDetails (
    OrderID INT,
    CustomerName VARCHAR(255),
    Product VARCHAR(255),
    Quantity INT
);

-- Insert the given data into the temporary table
INSERT INTO OrderDetails (OrderID, CustomerName, Product, Quantity) VALUES
(101, 'John Doe', 'Laptop', 2),
(101, 'John Doe', 'Mouse', 1),
(102, 'Jane Smith', 'Tablet', 3),
(102, 'Jane Smith', 'Keyboard', 1),
(102, 'Jane Smith', 'Mouse', 2),
(103, 'Emily Clark', 'Phone', 1);

-- Create the Orders table (OrderID, CustomerName) to remove the partial dependency
CREATE TEMPORARY TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerName VARCHAR(255)
);

-- Insert distinct OrderID and CustomerName into the Orders table
INSERT INTO Orders (OrderID, CustomerName)
SELECT DISTINCT OrderID, CustomerName
FROM OrderDetails;

-- Create the OrderItems table (OrderID, Product, Quantity)
CREATE TEMPORARY TABLE OrderItems (
    OrderID INT,
    Product VARCHAR(255),
    Quantity INT,
    PRIMARY KEY (OrderID, Product),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

-- Insert OrderID, Product, and Quantity into the OrderItems table
INSERT INTO OrderItems (OrderID, Product, Quantity)
SELECT OrderID, Product, Quantity
FROM OrderDetails;

-- Show the results (Orders and OrderItems tables)
SELECT * FROM Orders;
SELECT * FROM OrderItems;
